require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const { scrapeLastRounds } = require("./scraper");
const { predictNext } = require("./predict");
const { formatRoundsWithPeriod, formatSignal } = require("./format");

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!TOKEN) {
  console.error("‚ùå TELEGRAM_BOT_TOKEN ‡¶Æ‡¶ø‡¶∏‡¶ø‡¶Ç (.env)");
  process.exit(1);
}

const bot = new TelegramBot(TOKEN, { polling: true });

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    "üëã `/signal` ‡¶≤‡¶ø‡¶ñ‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶æ‡¶á‡¶ü‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá live rounds ‡¶®‡¶ø‡ßü‡ßá Small/Big ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶¶‡ßá‡¶¨‡ßã‡•§\n\n‚ö†Ô∏è ‡¶®‡ßã‡¶ü: ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá .env ‡¶è market username/password ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
    { parse_mode: "Markdown" }
  );
});

bot.onText(/\/signal/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    // scrape last rounds with period+number
    const rounds = await scrapeLastRounds();
    if (!rounds?.length) {
      await bot.sendMessage(chatId, "‚ö†Ô∏è ‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶® ‡¶®‡¶æ‡¶á‡•§ Selector/URL ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡ßã‡•§");
      return;
    }

    const numbers = rounds.map(r => r.number).filter(Boolean);
    const { signal } = predictNext(numbers);

    const text = formatRoundsWithPeriod(rounds) + formatSignal(signal);
    await bot.sendMessage(chatId, text, { parse_mode: "Markdown" });

  } catch (err) {
    console.error("‚ùå /signal error:", err);
    await bot.sendMessage(chatId, "‚ùå ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (login/selectors/captcha?).");
  }
});
